//
// Created by Jhean Lee on 2025/1/24.
//

#ifndef SPHERE_LINKED_CONSOLE_HPP
  #define SPHERE_LINKED_CONSOLE_HPP
  #include <string>

  enum Level {
    ERROR,
    WARNING,
    INFO,
  };

  enum Code {
    //  connection
    SOCK_CREATE_FAILED,
    SOCK_BIND_FAILED,
    SOCK_LISTEN_FAILED,
    SOCK_ACCEPT_FAILED,
    SOCK_SETSOCKOPT_FAILED,
    SOCK_POLL_ERR,

    SSL_CREATE_CONTEXT_FAILED,
    SSL_ACCEPT_FAILED,
    SSL_LOAD_CERT_KEY_FAILED,

    //  database
    SQLITE_OPEN_FAILED,
    SQLITE_CREATE_TABLE_FAILED,
    SQLITE_PREPARE_FAILED,
    SQLITE_BIND_PARAMETER_FAILED,
    SQLITE_STEP_FAILED,
    SQLITE_RETRIEVE_FAILED,
    SQLITE_CLOSING,
    SQLITE_CLOSE_SUCCESS,
    SQLITE_CLOSE_FAILED,

    GENERATED_TOKEN,
    REMOVED_TOKEN,

    //  option
    OPTION_UNKNOWN,
    OPTION_KEY_NOT_SET,
    OPTION_CERT_NOT_SET,
    PORT_INVALID_CHARACTER,
    PORT_INVALID_RANGE,
    PORT_WELL_KNOWN,
    PORT_INVALID_LIMIT,
    PORT_MAY_EXCEED,

    INFO_KEY_PATH,
    INFO_CERT_PATH,
    INFO_DB_PATH,
    INFO_HOST,

    //  message
    MESSAGE_SEND_FAILED,
    MESSAGE_LOAD_FAILED,
    MESSAGE_DUMP_FAILED,
    BUFFER_SEND_ERROR_TO_CLIENT,
    BUFFER_SEND_ERROR_TO_EXTERNAL_USER,

    //  tunnel
    CONNECTION_LISTEN_STARTED,
    CLIENT_CONNECTION_ACCEPTED,
    EXTERNAL_CONNECTION_ACCEPTED,
    CONNECTION_CLOSED,
    CONNECTION_CLOSED_BY_CLIENT,
    CONNECTION_CLOSED_BY_EXTERNAL_USER,
    HEARTBEAT_TIMEOUT,
    AUTHENTICATION_FAILED,
    AUTHENTICATION_SUCCESS,
    PROXY_PORT_NEW,
    PROXYING_STARTED,
    PROXYING_ENDED,
    NO_PORT_AVAILABLE,

    //  signal
    SIGNAL,
  };

  void console(Level level, Code code, const char *detail, const std::string &function);
#endif //SPHERE_LINKED_CONSOLE_HPP
